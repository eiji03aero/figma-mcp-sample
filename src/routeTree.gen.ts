/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as Case3IndexImport } from './routes/case-3/index'
import { Route as Case2IndexImport } from './routes/case-2/index'
import { Route as Case1IndexImport } from './routes/case-1/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const Case3IndexRoute = Case3IndexImport.update({
  id: '/case-3/',
  path: '/case-3/',
  getParentRoute: () => rootRoute,
} as any)

const Case2IndexRoute = Case2IndexImport.update({
  id: '/case-2/',
  path: '/case-2/',
  getParentRoute: () => rootRoute,
} as any)

const Case1IndexRoute = Case1IndexImport.update({
  id: '/case-1/',
  path: '/case-1/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/case-1/': {
      id: '/case-1/'
      path: '/case-1'
      fullPath: '/case-1'
      preLoaderRoute: typeof Case1IndexImport
      parentRoute: typeof rootRoute
    }
    '/case-2/': {
      id: '/case-2/'
      path: '/case-2'
      fullPath: '/case-2'
      preLoaderRoute: typeof Case2IndexImport
      parentRoute: typeof rootRoute
    }
    '/case-3/': {
      id: '/case-3/'
      path: '/case-3'
      fullPath: '/case-3'
      preLoaderRoute: typeof Case3IndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/case-1': typeof Case1IndexRoute
  '/case-2': typeof Case2IndexRoute
  '/case-3': typeof Case3IndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/case-1': typeof Case1IndexRoute
  '/case-2': typeof Case2IndexRoute
  '/case-3': typeof Case3IndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/case-1/': typeof Case1IndexRoute
  '/case-2/': typeof Case2IndexRoute
  '/case-3/': typeof Case3IndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/case-1' | '/case-2' | '/case-3'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/case-1' | '/case-2' | '/case-3'
  id: '__root__' | '/' | '/case-1/' | '/case-2/' | '/case-3/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Case1IndexRoute: typeof Case1IndexRoute
  Case2IndexRoute: typeof Case2IndexRoute
  Case3IndexRoute: typeof Case3IndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Case1IndexRoute: Case1IndexRoute,
  Case2IndexRoute: Case2IndexRoute,
  Case3IndexRoute: Case3IndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/case-1/",
        "/case-2/",
        "/case-3/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/case-1/": {
      "filePath": "case-1/index.tsx"
    },
    "/case-2/": {
      "filePath": "case-2/index.tsx"
    },
    "/case-3/": {
      "filePath": "case-3/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
